# .github/workflows/acc-monitor.yml
# üèéÔ∏è Workflow automation for ACC monitoring

name: ACC Monitor

# Scheduler
on:
    schedule:
        - cron: '*/15 * * * *'  # Every 15 minutes
    workflow_dispatch:  # Manual trigger
        inputs:
            force_notification:
                description: 'Force notification even if no significant change'
                required: false
                default: false
                type: boolean

# Job definition
jobs:
    monitor-acc-servers:
        runs-on: ubuntu-latest
        timeout-minutes: 3  # min - Timeout for the job
        permissions:
            contents: read
            actions: write
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Python 3.12.1
              uses: actions/setup-python@v4
              with:
                  python-version: '3.12'
                  cache: 'pip'

            - name: Install dependencies
              run: |
                python -m pip install --upgrade pip
                pip install -r requirements.txt

            - name: Restore cache
              uses: actions/cache/restore@v4
              with:
                path: |
                  acc_last_status.txt
                  acc_metrics.json
                key: acc-status-${{ github.repository }}
                restore-keys:
                  acc-status-

            - name: Run ACC Monitoring
              env:
                DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
                FORCE_NOTIFICATION: ${{ github.event.inputs.force_notification }}
              run: |
                echo "üèÅ Starting ACC Server Monitoring"
                echo "üîç API: https://acc-status.jonatan.net/api/v2/acc/status"
                echo "‚è∞ Run #${{ github.run_number }}"
                echo "üïê UTC Time: $(date -u)"
                echo ""
                python acc_monitor.py
                echo ""
                echo "‚úÖ ACC monitoring completed"

            - name: Save cache
              uses: actions/cache/save@v4
              if: always()
              with:
                path: |
                  acc_last_status.txt
                  acc_metrics.json
                key: acc-status-${{ github.repository }}-${{ github.run_id }}

            - name: Upload artifacts
              uses: actions/upload-artifact@v4
              if: always()
              with:
                name: acc-monitor-data-${{ github.run_number }}
                path: |
                  acc_*.txt
                  acc_*.json
                if-no-files-found: warn
                retention-days: 7  # days - Retention period for artifacts

            - name: Display summary
              if: always()
              run: |
                echo ""
                echo "üèéÔ∏è === ACC MONITORING SUMMARY ==="
                echo "üìÖ UTC Date: $(date -u)"
                echo "üîÑ Run #${{ github.run_number }}"
                echo "‚è±Ô∏è Job Status: ${{ job.status }}"
                
                if [ -f "acc_last_status.txt" ]; then
                  echo "üìä Current Status: $(cat acc_last_status.txt)"
                fi
                
                if [ -f "acc_metrics.json" ]; then
                  entries=$(grep -o '{' acc_metrics.json | wc -l)
                  echo "üìà History Entries: $entries"
                fi
                
                echo "üîó Monitored Site: https://acc-status.jonatan.net/"
                echo "=================================="
